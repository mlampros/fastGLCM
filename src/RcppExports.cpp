// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// digitize
arma::mat digitize(arma::Mat<int> x, int bins, int min, int max);
RcppExport SEXP _fastGLCM_digitize(SEXP xSEXP, SEXP binsSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<int> >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type bins(binsSEXP);
    Rcpp::traits::input_parameter< int >::type min(minSEXP);
    Rcpp::traits::input_parameter< int >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(digitize(x, bins, min, max));
    return rcpp_result_gen;
END_RCPP
}
// deg2rad
double deg2rad(double x);
RcppExport SEXP _fastGLCM_deg2rad(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(deg2rad(x));
    return rcpp_result_gen;
END_RCPP
}
// fast_glcm
arma::cube fast_glcm(arma::Mat<int>& img, int vmin, int vmax, unsigned int levels, int kernel_size, double distance, double angle, int threads);
RcppExport SEXP _fastGLCM_fast_glcm(SEXP imgSEXP, SEXP vminSEXP, SEXP vmaxSEXP, SEXP levelsSEXP, SEXP kernel_sizeSEXP, SEXP distanceSEXP, SEXP angleSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<int>& >::type img(imgSEXP);
    Rcpp::traits::input_parameter< int >::type vmin(vminSEXP);
    Rcpp::traits::input_parameter< int >::type vmax(vmaxSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type levels(levelsSEXP);
    Rcpp::traits::input_parameter< int >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type distance(distanceSEXP);
    Rcpp::traits::input_parameter< double >::type angle(angleSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_glcm(img, vmin, vmax, levels, kernel_size, distance, angle, threads));
    return rcpp_result_gen;
END_RCPP
}
// method_exists
bool method_exists(std::vector<std::string> methods, std::string this_method);
RcppExport SEXP _fastGLCM_method_exists(SEXP methodsSEXP, SEXP this_methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type methods(methodsSEXP);
    Rcpp::traits::input_parameter< std::string >::type this_method(this_methodSEXP);
    rcpp_result_gen = Rcpp::wrap(method_exists(methods, this_method));
    return rcpp_result_gen;
END_RCPP
}
// fast_GLCM
Rcpp::List fast_GLCM(arma::Mat<int>& img, std::vector<std::string> methods, int levels, int kernel_size, double distance, double angle, int threads, Rcpp::Nullable<Rcpp::String> dir_save);
RcppExport SEXP _fastGLCM_fast_GLCM(SEXP imgSEXP, SEXP methodsSEXP, SEXP levelsSEXP, SEXP kernel_sizeSEXP, SEXP distanceSEXP, SEXP angleSEXP, SEXP threadsSEXP, SEXP dir_saveSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<int>& >::type img(imgSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type methods(methodsSEXP);
    Rcpp::traits::input_parameter< int >::type levels(levelsSEXP);
    Rcpp::traits::input_parameter< int >::type kernel_size(kernel_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type distance(distanceSEXP);
    Rcpp::traits::input_parameter< double >::type angle(angleSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::String> >::type dir_save(dir_saveSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_GLCM(img, methods, levels, kernel_size, distance, angle, threads, dir_save));
    return rcpp_result_gen;
END_RCPP
}
