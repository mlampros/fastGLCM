[{"path":"https://mlampros.github.io/fastGLCM/articles/fastGLCM_Functionality.html","id":"sample-satellite-imagery","dir":"Articles","previous_headings":"","what":"Sample Satellite Imagery","title":"Functionality of the fastGLCM R package","text":"fastGLCM R package includes ALOS-3 simulation image JAXA (Japan Aerospace Exploration Agency) compressed format (.zip) around Joso City, Ibaraki Prefecture September 11, 2015, used vignette illustration purposes. fastGLCM versions R package take 2-dimensional object input (numeric matrix) required range pixel values 0 255,    decrease computation time initial width height reduced 500,  output matrices based selected methods (mean, std, contrast, dissimilarity, homogeneity, ASM, energy, max, entropy) can visualized multi-plot,   Credits: ALOS-3 simulation image based sample product provided JAXA. Please, read terms use sample product","code":"require(fastGLCM) #> Loading required package: fastGLCM require(OpenImageR) #> Loading required package: OpenImageR require(utils)  temp_dir = tempdir(check = FALSE) # temp_dir  zip_file = system.file('images', 'JAXA_Joso-City2_PAN.tif.zip', package = \"fastGLCM\") utils::unzip(zip_file, exdir = temp_dir) path_extracted = file.path(temp_dir, 'JAXA_Joso-City2_PAN.tif')  im = readImage(path = path_extracted) dim(im) #> [1] 1555 1414 imageShow(im) #.................................................... # the pixel values will be adjusted between 0 and 255 #....................................................  im = resizeImage(im, 500, 500, 'nearest') im = OpenImageR::norm_matrix_range(im, 0, 255)  #--------------------------------- # computation of all GLCM features #---------------------------------  methods = c('mean',             'std',             'contrast',             'dissimilarity',             'homogeneity',             'ASM',             'energy',             'max',             'entropy')  res_glcm = fastGLCM_Rcpp(data = im,                          methods = methods,                          levels = 8,                          kernel_size = 5,                          distance = 1.0,                          angle = 0.0,                          threads = 1,                          verbose = TRUE) #> Elapsed time: 0 hours and 0 minutes and 0 seconds.  if (file.exists(path_extracted)) file.remove(path_extracted) #> [1] TRUE  str(res_glcm) #> List of 9 #>  $ mean         : num [1:500, 1:500] 0.578 0.766 0.953 0.938 0.938 ... #>  $ std          : num [1:500, 1:500] 28.3 40 51.8 59.5 59.5 ... #>  $ contrast     : num [1:500, 1:500] 2 2 2 0 0 1 2 4 4 4 ... #>  $ dissimilarity: num [1:500, 1:500] 2 2 2 0 0 1 2 4 4 4 ... #>  $ homogeneity  : num [1:500, 1:500] 8 11 14 15 15 14.5 14 13 13 13 ... #>  $ ASM          : num [1:500, 1:500] 51 102 171 225 225 147 107 73 73 73 ... #>  $ energy       : num [1:500, 1:500] 7.14 10.1 13.08 15 15 ... #>  $ max          : num [1:500, 1:500] 7 10 13 15 15 12 10 8 8 8 ... #>  $ entropy      : num [1:500, 1:500] 8.59 8.49 8.42 8.07 8.07 ... plot_multi_images(list_images = res_glcm,                   par_ROWS = 2,                   par_COLS = 5,                   titles = methods)"},{"path":"https://mlampros.github.io/fastGLCM/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lampros Mouselimis. Author, maintainer. Takahiro Toizumi. Copyright holder.           Author fastGLCM Python code","code":""},{"path":"https://mlampros.github.io/fastGLCM/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mouselimis L (2025). fastGLCM: Fast Gray Level Co-occurrence Matrix computation (GLCM) using R. R package version 1.0.3, https://CRAN.R-project.org/package=fastGLCM. Toizumi T (2021). fastGLCM. https://github.com/tzm030329/GLCM. Toizumi T, Zini S, Sagi K, Kaneko E, Tsukada M, Schettini R (2019). “Artifact-Free Thin Cloud Removal Using Gans.” IEEE International Conference Image Processing (ICIP), 3596–3600. doi:10.1109/ICIP.2019.8803652.","code":"@Manual{,   title = {{fastGLCM}: Fast Gray Level Co-occurrence Matrix computation (GLCM) using R},   author = {Lampros Mouselimis},   year = {2025},   note = {R package version 1.0.3},   url = {https://CRAN.R-project.org/package=fastGLCM}, } @Manual{,   title = {fastGLCM},   author = {Takahiro Toizumi},   year = {2021},   url = {https://github.com/tzm030329/GLCM}, } @InProceedings{,   author = {Takahiro Toizumi and Simone Zini and Kazutoshi Sagi and Eiji Kaneko and Masato Tsukada and Raimondo Schettini},   title = {Artifact-Free Thin Cloud Removal Using Gans},   booktitle = {IEEE International Conference on Image Processing (ICIP)},   year = {2019},   pages = {3596--3600},   doi = {10.1109/ICIP.2019.8803652}, }"},{"path":"https://mlampros.github.io/fastGLCM/index.html","id":"fastglcm","dir":"","previous_headings":"","what":"fastGLCM","title":"GLCM Texture Features","text":"Fast GLCM feature texture computation. R package includes two GLCM implementations: Rcpp Armadillo implementation parallelized modified return GLCM features . Preferably use version aware difference computing convolution OpenCV (python fastGLCM implementation) Armadillo library (Rcpp implementation). OpenCV performs interpolation image boundaries whereas Armadillo . big images visual difference ’s visible small imagery. fast GLCM feature texture computation based python numpy arrays (information see ‘fastGLCM’ Python Code Github Repository). use version, need Python configured Operating System reticulate R package installed. details functionality fastGLCM can found package Documentation, Vignette blog-post","code":""},{"path":"https://mlampros.github.io/fastGLCM/index.html","id":"installation","dir":"","previous_headings":"fastGLCM","what":"Installation:","title":"GLCM Texture Features","text":"install package CRAN use,  download latest version Github using pak package,","code":"install.packages(\"fastGLCM\") pak::pak('mlampros/fastGLCM')"},{"path":"https://mlampros.github.io/fastGLCM/index.html","id":"docker-image","dir":"","previous_headings":"fastGLCM > Installation:","what":"Docker Image","title":"GLCM Texture Features","text":"Docker images fastGLCM package available download dockerhub account. images come Rstudio R-development version (latest) installed. whole process tested Ubuntu 18.04. pull & run image following,   user can also bind home directory / folder image use files specifying -v command,   USER defaults rstudio give PASSWORD preference (see https://rocker-project.org information).  Open web-browser depending docker image build / run give,  1st. Option personal computer,   2nd. Option cloud instance,   access Rstudio console order give username password.","code":"docker pull mlampros/fastglcm:rstudiodev  docker run -d --name rstudio_dev -e USER=rstudio -e PASSWORD=give_here_your_password --rm -p 8787:8787 mlampros/fastglcm:rstudiodev docker run -d --name rstudio_dev -e USER=rstudio -e PASSWORD=give_here_your_password --rm -p 8787:8787 -v /home/YOUR_DIR:/home/rstudio/YOUR_DIR mlampros/fastglcm:rstudiodev http://0.0.0.0:8787 http://Public DNS:8787"},{"path":"https://mlampros.github.io/fastGLCM/index.html","id":"similar-projects","dir":"","previous_headings":"fastGLCM","what":"Similar Projects:","title":"GLCM Texture Features","text":"https://github.com/azvoleff/glcm (RcppArmadillo Implementation) https://github.com/ailich/GLCMTextures (Rcpp RcppArmadillo Implementation)","code":""},{"path":"https://mlampros.github.io/fastGLCM/index.html","id":"citation","dir":"","previous_headings":"fastGLCM","what":"Citation:","title":"GLCM Texture Features","text":"use code repository paper research please cite fastGLCM original articles (see CITATION) https://CRAN.R-project.org/package=fastGLCM:","code":"@Manual{,   title = {{fastGLCM}: Fast Gray Level Co-occurrence Matrix computation (GLCM) using R},   author = {Lampros Mouselimis},   year = {2025},   note = {R package version 1.0.3},   url = {https://CRAN.R-project.org/package=fastGLCM}, }"},{"path":"https://mlampros.github.io/fastGLCM/reference/compute_elapsed_time.html","id":null,"dir":"Reference","previous_headings":"","what":"elapsed time in hours & minutes & seconds — compute_elapsed_time","title":"elapsed time in hours & minutes & seconds — compute_elapsed_time","text":"elapsed time hours & minutes & seconds","code":""},{"path":"https://mlampros.github.io/fastGLCM/reference/compute_elapsed_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"elapsed time in hours & minutes & seconds — compute_elapsed_time","text":"","code":"compute_elapsed_time(time_start)"},{"path":"https://mlampros.github.io/fastGLCM/reference/compute_elapsed_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"elapsed time in hours & minutes & seconds — compute_elapsed_time","text":"time_start numeric value specifying start time","code":""},{"path":"https://mlampros.github.io/fastGLCM/reference/compute_elapsed_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"elapsed time in hours & minutes & seconds — compute_elapsed_time","text":"return value prints time form character string R session","code":""},{"path":"https://mlampros.github.io/fastGLCM/reference/fastGLCM_Rcpp.html","id":null,"dir":"Reference","previous_headings":"","what":"GLCM feature texture extraction — fastGLCM_Rcpp","title":"GLCM feature texture extraction — fastGLCM_Rcpp","text":"GLCM feature texture extraction","code":""},{"path":"https://mlampros.github.io/fastGLCM/reference/fastGLCM_Rcpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GLCM feature texture extraction — fastGLCM_Rcpp","text":"","code":"fastGLCM_Rcpp(   data,   methods,   levels = 8,   kernel_size = 5,   distance = 1,   angle = 0,   dir_save = NULL,   threads = 1,   verbose = FALSE )"},{"path":"https://mlampros.github.io/fastGLCM/reference/fastGLCM_Rcpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GLCM feature texture extraction — fastGLCM_Rcpp","text":"data numeric matrix methods vector character strings. One following: 'mean', 'std', 'contrast', 'dissimilarity', 'homogeneity', 'ASM', 'energy', 'max', 'entropy' levels integer specifying window size. parameter create mask size levels x levels internally kernel_size integer specifying kernel size. kernel 1's created cv2.filter2D filter utilized convolution distance numeric value specifying pixel pair distance offsets ('pixel' value 1.0, 2.0 etc.) angle numeric value specifying pixel pair angles ('degree' value 0.0, 30.0, 45.0, 90.0 etc.) dir_save either NULL character string specifying valid path directory output GLCM matrices (specified 'methods') saved. setting parameter valid directory memory usage decreased. threads integer value specifying number cores run parallel verbose boolean. TRUE information printed console","code":""},{"path":"https://mlampros.github.io/fastGLCM/reference/fastGLCM_Rcpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GLCM feature texture extraction — fastGLCM_Rcpp","text":"list consisting one GLCM features","code":""},{"path":"https://mlampros.github.io/fastGLCM/reference/fastGLCM_Rcpp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GLCM feature texture extraction — fastGLCM_Rcpp","text":"following two factors (highly probable) increase memory usage computations: 1st. image size (user might resize image first) 2nd. 'levels' parameter. bigger parameter matrices initialized memory used. instance 'levels' parameter equals    8 8 * 8 = 64 matrices equal size input image initialized. means image dimensions (2745 x 2745) image-object size approx. 60 MB    initializing 64 matrices memory increase 3.86 GB. function Rcpp implementation python fastGLCM module. using function separately utilizing threads slightly faster compared python vectorized functions, however lot faster computing features . dir_save parameter allows user save GLCM's .csv files directory. way output GLCM's matrices returned R session (reduced memory usage). However, saving GLCM's .csv files computation time increases.","code":""},{"path":"https://mlampros.github.io/fastGLCM/reference/fastGLCM_Rcpp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"GLCM feature texture extraction — fastGLCM_Rcpp","text":"https://github.com/tzm030329/GLCM","code":""},{"path":"https://mlampros.github.io/fastGLCM/reference/fastGLCM_Rcpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GLCM feature texture extraction — fastGLCM_Rcpp","text":"","code":"require(fastGLCM) require(OpenImageR) #> Loading required package: OpenImageR require(utils)  temp_dir = tempdir(check = FALSE) # temp_dir  zip_file = system.file('images', 'JAXA_Joso-City2_PAN.tif.zip', package = \"fastGLCM\") utils::unzip(zip_file, exdir = temp_dir) path_extracted = file.path(temp_dir, 'JAXA_Joso-City2_PAN.tif')  im = readImage(path = path_extracted) dim(im) #> [1] 1555 1414  #............................................... # resize the image and adjust pixel values range #...............................................  im = resizeImage(im, 500, 500, 'nearest') im = OpenImageR::norm_matrix_range(im, 0, 255)  #--------------------------------- # computation of all GLCM features #---------------------------------  methods = c('mean',             'std',             'contrast',             'dissimilarity',             'homogeneity',             'ASM',             'energy',             'max',             'entropy')  res_glcm = fastGLCM_Rcpp(data = im,                          methods = methods,                          levels = 8,                          kernel_size = 5,                          distance = 1.0,                          angle = 0.0,                          threads = 1) # str(res_glcm)  # plot_multi_images(list_images = res_glcm, #                   par_ROWS = 2, #                   par_COLS = 5, #                   titles = methods)  if (file.exists(path_extracted)) file.remove(path_extracted) #> [1] TRUE"},{"path":"https://mlampros.github.io/fastGLCM/reference/fastglcm.html","id":null,"dir":"Reference","previous_headings":"","what":"GLCM feature texture extraction — fastglcm","title":"GLCM feature texture extraction — fastglcm","text":"GLCM feature texture extraction GLCM feature texture extraction","code":""},{"path":"https://mlampros.github.io/fastGLCM/reference/fastglcm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GLCM feature texture extraction — fastglcm","text":"","code":"# init <- fastglcm$new()"},{"path":"https://mlampros.github.io/fastGLCM/reference/fastglcm.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"GLCM feature texture extraction — fastglcm","text":"fastglcm$new()  --------------  GLCM_compute()  --------------","code":""},{"path":"https://mlampros.github.io/fastGLCM/reference/fastglcm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"GLCM feature texture extraction — fastglcm","text":"https://github.com/tzm030329/GLCM https://github.com/1044197988/Python-Image-feature-extraction","code":""},{"path":[]},{"path":"https://mlampros.github.io/fastGLCM/reference/fastglcm.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"GLCM feature texture extraction — fastglcm","text":"fastglcm$new() fastglcm$GLCM_compute() fastglcm$clone()","code":""},{"path":"https://mlampros.github.io/fastGLCM/reference/fastglcm.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"GLCM feature texture extraction — fastglcm","text":"Initialization method 'fastglcm' R6 class","code":""},{"path":"https://mlampros.github.io/fastGLCM/reference/fastglcm.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GLCM feature texture extraction — fastglcm","text":"","code":"fastglcm$new()"},{"path":"https://mlampros.github.io/fastGLCM/reference/fastglcm.html","id":"method-glcm-compute-","dir":"Reference","previous_headings":"","what":"Method GLCM_compute()","title":"GLCM feature texture extraction — fastglcm","text":"GLCM computation method receive results","code":""},{"path":"https://mlampros.github.io/fastGLCM/reference/fastglcm.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"GLCM feature texture extraction — fastglcm","text":"","code":"fastglcm$GLCM_compute(   img,   method,   vmin = 0,   vmax = 255,   levels = 8,   ks = 5,   distance = 1,   angle = 0,   verbose = FALSE )"},{"path":"https://mlampros.github.io/fastGLCM/reference/fastglcm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GLCM feature texture extraction — fastglcm","text":"img numeric matrix method character string specifying method. Can one 'mean', 'std', 'contrast', 'dissimilarity', 'homogeneity', 'ASM_Energy', 'max' 'entropy' vmin numeric value specifying minimum value input image ( img ) vmax numeric value specifying maximum value input image ( img ) levels integer specifying window size. parameter create mask size levels x levels internally ks integer specifying kernel size. kernel 1's created cv2.filter2D filter utilized convolution distance numeric value specifying pixel pair distance offsets ('pixel' value 1.0, 2.0 etc.) angle numeric value specifying pixel pair angles ('degree' value 0.0, 30.0, 45.0, 90.0 etc.) verbose boolean. TRUE information printed console","code":""},{"path":"https://mlampros.github.io/fastGLCM/reference/fastglcm.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"GLCM feature texture extraction — fastglcm","text":"list object method set 'ASM_Energy' otherwise numeric matrix","code":""},{"path":"https://mlampros.github.io/fastGLCM/reference/fastglcm.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"GLCM feature texture extraction — fastglcm","text":"objects class cloneable method.","code":""},{"path":"https://mlampros.github.io/fastGLCM/reference/fastglcm.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"GLCM feature texture extraction — fastglcm","text":"","code":"fastglcm$clone(deep = FALSE)"},{"path":"https://mlampros.github.io/fastGLCM/reference/fastglcm.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"GLCM feature texture extraction — fastglcm","text":"deep Whether make deep clone.","code":""},{"path":"https://mlampros.github.io/fastGLCM/reference/fastglcm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GLCM feature texture extraction — fastglcm","text":"","code":"if (FALSE) { # \\dontrun{  require(fastGLCM) require(OpenImageR)  file_im = system.file('images', 'Sugar_Cane_Bolivia_PlanetNICFI.png', package = 'fastGLCM') im = readImage(file_im)  #................................... # convert to gray and make sure that # pixel values are between 0 and 255 #...................................  im = rgb_2gray(im) im = im * 255  MIN = min(as.vector(im)) MAX = max(as.vector(im))  #............... # methods to use #...............  methods_py = c('mean',                'std',                'contrast',                'dissimilarity',                'homogeneity',                'ASM_Energy',                'max',                'entropy')  init = fastglcm$new()  lst_glcm_py = list()  for (item_m in methods_py) {    cat(paste0('Method: ', item_m), '\\n')    res_item = init$GLCM_compute(img = im,                                method = item_m,                                vmin = as.integer(MIN),                                vmax = as.integer(MAX),                                levels = as.integer(8),                                ks = as.integer(5),                                distance = 1.0,                                angle = 0.0)    lst_glcm_py[[item_m]] = res_item }  #.............................. # Create two different sublists # for 'ASM' and 'Energy' #..............................  lst_glcm_py = append(lst_glcm_py, list(lst_glcm_py[['ASM_Energy']][[1]]), after = 5) names(lst_glcm_py)[6] = 'ASM'  lst_glcm_py = append(lst_glcm_py, list(lst_glcm_py[['ASM_Energy']][[2]]), after = 6) names(lst_glcm_py)[7] = 'energy'  lst_glcm_py[['ASM_Energy']] = NULL  str(lst_glcm_py)  #......................... # multi-plot of the output #.........................  plot_multi_images(list_images = lst_glcm_py,                   par_ROWS = 2,                   par_COLS = 5,                   titles = names(lst_glcm_py)) } # }"},{"path":"https://mlampros.github.io/fastGLCM/reference/inner_elapsed_time.html","id":null,"dir":"Reference","previous_headings":"","what":"inner function of 'compute_elapsed_time' — inner_elapsed_time","title":"inner function of 'compute_elapsed_time' — inner_elapsed_time","text":"inner function 'compute_elapsed_time'","code":""},{"path":"https://mlampros.github.io/fastGLCM/reference/inner_elapsed_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"inner function of 'compute_elapsed_time' — inner_elapsed_time","text":"","code":"inner_elapsed_time(secs, estimated = FALSE)"},{"path":"https://mlampros.github.io/fastGLCM/reference/inner_elapsed_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"inner function of 'compute_elapsed_time' — inner_elapsed_time","text":"secs numeric value specifying seconds estimated boolean. TRUE output label becomes 'Estimated time'","code":""},{"path":"https://mlampros.github.io/fastGLCM/reference/inner_elapsed_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"inner function of 'compute_elapsed_time' — inner_elapsed_time","text":"character string showing estimated elapsed time","code":""},{"path":"https://mlampros.github.io/fastGLCM/reference/plot_multi_images.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot multiple images — plot_multi_images","title":"Plot multiple images — plot_multi_images","text":"Plot multiple images","code":""},{"path":"https://mlampros.github.io/fastGLCM/reference/plot_multi_images.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot multiple images — plot_multi_images","text":"","code":"plot_multi_images(list_images, par_ROWS, par_COLS, ...)"},{"path":"https://mlampros.github.io/fastGLCM/reference/plot_multi_images.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot multiple images — plot_multi_images","text":"list_images list images visualized par_ROWS integer specifying number rows ouput plot-grid par_COLS integer specifying number columns output plot-grid ... arguments 'plot_multi_images' method 'GaborFeatureExtract' R6 class ('OpenImageR' package)","code":""},{"path":"https://mlampros.github.io/fastGLCM/reference/plot_multi_images.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot multiple images — plot_multi_images","text":"return R object displays list input images","code":""},{"path":"https://mlampros.github.io/fastGLCM/reference/plot_multi_images.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot multiple images — plot_multi_images","text":"usage 'plot_multi_images()' function see example section 'fastGLCM_Rcpp()' function 'fastglcm()' R6 class","code":""},{"path":"https://mlampros.github.io/fastGLCM/news/index.html","id":"fastglcm-104","dir":"Changelog","previous_headings":"","what":"fastGLCM 1.0.4","title":"fastGLCM 1.0.4","text":"removed SystemRequirements DESCRIPTION file.","code":""},{"path":"https://mlampros.github.io/fastGLCM/news/index.html","id":"fastglcm-103","dir":"Changelog","previous_headings":"","what":"fastGLCM 1.0.3","title":"fastGLCM 1.0.3","text":"CRAN release: 2025-09-14 updated Makevars Makevars.win files adding -DARMA_USE_CURRENT (see issue: https://github.com/RcppCore/RcppArmadillo/issues/476) removed -mthreads compilation option “Makevars.win” file removed “CXX_STD = CXX11” “Makevars” files, “[[Rcpp::plugins(cpp11)]]” “fastglcm.cpp” file due following NOTE CRAN, “NOTE Specified C++11: please drop specification unless essential” (see also: https://www.tidyverse.org/blog/2023/03/cran-checks-compiled-code/#note-regarding-systemrequirements-c11)","code":""},{"path":"https://mlampros.github.io/fastGLCM/news/index.html","id":"fastglcm-102","dir":"Changelog","previous_headings":"","what":"fastGLCM 1.0.2","title":"fastGLCM 1.0.2","text":"CRAN release: 2022-09-25 fixed bug ‘fastglcm.cpp’ file related ‘mean’ ‘std’ methods (‘std’ selected ‘mean’ returned , expected)","code":""},{"path":"https://mlampros.github.io/fastGLCM/news/index.html","id":"fastglcm-101","dir":"Changelog","previous_headings":"","what":"fastGLCM 1.0.1","title":"fastGLCM 1.0.1","text":"CRAN release: 2022-09-04 fixed two clang-UBSAN warnings related fastglcm.cpp file. first gave: warning: use bitwise ‘&’ boolean operands (CRAN information page clang14 mentions, “& | apply integer types: && || used booleans”. second runtime error: nan outside range representable values type ‘int’ (integers can NaN). ’ve added test case Python code fastglcm R6 class tested Github (CRAN) ’ve added github action update python code ‘GLCM_Python_Code’ directory based ‘https://github.com/tzm030329/GLCM’ repository regularly (every week) updated Dockerfile","code":""},{"path":"https://mlampros.github.io/fastGLCM/news/index.html","id":"fastglcm-100","dir":"Changelog","previous_headings":"","what":"fastGLCM 1.0.0","title":"fastGLCM 1.0.0","text":"CRAN release: 2022-08-15","code":""}]
